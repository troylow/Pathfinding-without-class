#include <iostream>
using namespace std;

void createMaze();
int walkFunc(int,int);

int Maze[4][4] = {
    {1, 3, 4, 4},
    {4, 4, 3, 4},
    {4, 4, 4, 4},
    {3, 2, 3, 4}
    };
int InMaze[4][4] = {
    {0, 0, 0, 0},
    {0, 0, 0, 0},
    {0, 0, 0, 0},
    {0, 0, 0, 0}
    };

void createMaze()
{
  for (int row=0;row<4;row++)
   { 
        for (int col=0;col<4;col++)
        {
          if (Maze[row][col]==1)
            {
              cout << " N ";
            }
          else if (Maze[row][col]==2)
            {
              cout << " E ";
            }
          else if (InMaze[row][col]==6)
            {
              cout << " U ";
            }
          else if (Maze[row][col]==3)
            {
              cout << " X ";
            }
          else if (Maze[row][col]==4)
            {
              cout << " O ";
            }

        }
        cout << endl;
   }
       cout << endl;
}


int walkFunc(int urow, int ucol)
{
//UP
if (Maze[urow-1][ucol] == 4 && InMaze[urow-1][ucol] != 5)
  {
    cout << "Create UP" << endl; 
    InMaze[urow][ucol] = 5;
    InMaze[urow-1][ucol] = 6;
    urow--;
    createMaze();
    walkFunc(urow,ucol);
  }
else if (Maze[urow-1][ucol] == 1)
 {  
    createMaze();
    InMaze[urow][ucol] = 5;
    cout << "Maze Solved" << endl;
    return 1;
 }
 else if (Maze[urow-1][ucol] == 3)
 {
    cout << "BlockedUP" << endl;
 }
else 
{
  InMaze[urow][ucol]=0;
  cout << "Return0UP" << endl;

}
//RIGHT
if (Maze[urow][ucol+1] == 4 && InMaze[urow][ucol+1] != 5)
  {
    cout << "Create Right" << endl;    
    InMaze[urow][ucol] = 5;
    InMaze[urow][ucol+1] = 6;
    ucol++;
    createMaze();
    walkFunc(urow,ucol);
  }
else if (Maze[urow][ucol+1] == 1)
 {   
    createMaze();
    InMaze[urow][ucol] = 5;
    cout << "Maze Solved!";
    return 1;
 }
 else if (Maze[urow][ucol+1] == 3)
 {
    cout << "BlockedRIGHT" << endl;
 }
else 
{
  InMaze[urow][ucol]=0;
  cout << "Return0Right" << endl;
}
//DOWN
if (Maze[urow+1][ucol] == 4 && InMaze[urow+1][ucol] != 5)
  {    
    cout << "Create DOWN" << endl; 
    InMaze[urow][ucol] = 5;
    InMaze[urow+1][ucol] = 6;
    urow++;
    createMaze();
    walkFunc(urow,ucol);
  }
else if (Maze[urow+1][ucol] == 1)
 {   
    createMaze();
    InMaze[urow][ucol] = 5;
    cout << "Maze Solved!";
    return 1;
 }
 else if (Maze[urow+1][ucol] == 3)
 {
    cout << "BlockedDOWN" << endl;
 }
else 
{
  InMaze[urow][ucol]=0;
  cout << "Return0DOWN" << endl;
}
//LEFT
if (Maze[urow][ucol-1] == 4 && InMaze[urow][ucol-1] != 5)
  {  
    cout << "Create Left" << endl;  
    InMaze[urow][ucol] = 5;
    InMaze[urow][ucol-1] = 6;
    ucol--;
    createMaze();
    walkFunc(urow,ucol);
  }
else if (Maze[urow][ucol-1] == 1)
 {
    createMaze();
    InMaze[urow][ucol] = 5;
    cout << "Maze Solved!";
    return 1;
 }
 else if (Maze[urow][ucol-1] == 3)
 {
    cout << "BlockedLEFT" << endl;
    return 0;
 }
else 
{
  InMaze[urow][ucol]=5;
  cout << "Return0Left" << endl;
  return 0;
}
InMaze[urow][ucol] = 5;
cout <<"Return 0 Program End" << endl;
return 0;
}

//return 1 got a possible solution
//return 0 dead end
//base case either dead end return 0
//found exit return 1
//2D array to keep track of where it has been but dont need to keep 



//boolean logic 0 is false
//anything but 0 is true

//FUNCTIONS,CLASSES, ASTAR



